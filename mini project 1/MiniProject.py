import numpy as np
from scipy.stats import norm
np.random.seed(100340)
def simulation_store(n_weeks, distribution, lot_size):
    store, cur = np.zeros(n_weeks), 0
    store[0] = lot_size
    while cur < n_weeks:
        if store[cur] > 0:
            cur += np.random.choice(np.arange(1, 7), p=distribution)
        if cur < n_weeks:
            store[cur] = lot_size
    return store


def simulation(n_weeks):
    """
    :param n_weeks: The span of the whole simulation
    :return:
    the result is stores in an array of shape ( n_weeks, 4) where each row represents the order from retail store and
    # direct customers each week.
    """
    # simulation for direct customers
    customer_order = np.random.binomial(160, 1/4, n_weeks)
    #simulation for store
    store_one_order = simulation_store(n_weeks, [0, 1 / 8, 1 / 4, 1 / 4, 1 / 4, 1 / 8], 40)
    store_two_order = simulation_store(n_weeks, [0, 1 / 5, 1 / 5, 1 / 5, 1 / 5, 1 / 5], 30)
    store_three_order = simulation_store(n_weeks, [0, 0, 1 / 4, 1 / 2, 1 / 4, 0], 50)

    result = np.array([store_one_order, store_two_order, store_three_order, customer_order])
    return result.T


def identify_renewal_time(performance):
    """
    :param performance: The simulation result generated by simulation(), which is an array of size (n_weeks, 4ï¼‰
    :return: an array storing the renewl time
    """
    renewal_time = []
    for ix, week in enumerate(performance):
        if np.all(week[:3] > 0):
            renewal_time.append(ix)
    return np.array(renewal_time)


def expected_number_order_in_a_week(week_performance):
    count_store_order = np.sum(week_performance[:3] > 0)
    count_customer_order = week_performance[3]
    return count_customer_order + count_store_order


def expected_number_unit_in_a_week(week_performance):
    return np.sum(week_performance)


def probability_more_than_75_unit(week_performance):
    return int(np.sum(week_performance) > 75)


def probability_no_store_order(week_performance):
    return int(np.sum(week_performance[:3]) == 0)


def expected_value_cost(week_performance):
    return 5 + 0.1*(np.sum(week_performance[0:3] > 0) + week_performance[3]) + 0.1*np.sum(week_performance)+100*np.sum(week_performance) ** (1/4)


def steady_state(performance, performance_measure):
    renewal_time = identify_renewal_time(simulation_result)
    partitioned_performance = np.array(np.split(performance, renewal_time))[1:-1] # the first element is empty set thus is dropped
    reward_ls, cycle_ls = [], []
    for cycle in partitioned_performance:
        reward = 0
        for weekly_performance in cycle:
            reward += performance_measure(weekly_performance)
        reward_ls.append(reward)
        cycle_ls.append(len(cycle))
    lb,ub = confidence_interval(np.array(reward_ls), np.array(cycle_ls))
    return np.mean(reward_ls)/np.mean(cycle_ls), [lb,ub]

def confidence_interval(reward_ls, cycle_ls, alpha = 0.05):
    N = len(reward_ls)
    s11square = np.sum((reward_ls - np.mean(reward_ls))**2)/(N-1)
    s22square = np.sum((cycle_ls - np.mean(cycle_ls))**2)/(N-1)
    s12square = np.dot(reward_ls-np.mean(reward_ls), cycle_ls-np.mean(cycle_ls))/(N-1)
    ssquare = s11square - 2 * np.mean(reward_ls)/np.mean(cycle_ls)*s12square + (np.mean(reward_ls)/np.mean(cycle_ls))**2 * s22square
    z = norm.ppf(1-alpha/2)
    lb = np.mean(reward_ls)/np.mean(cycle_ls) - np.sqrt(ssquare)*z/(np.mean(cycle_ls)*np.sqrt(N))
    ub = np.mean(reward_ls)/np.mean(cycle_ls) + np.sqrt(ssquare)*z/(np.mean(cycle_ls)*np.sqrt(N))
    return round(lb, 2), round(ub ,2)
N = 1280
simulation_result = simulation(N)
print("The expected number of orders in a week in steady state is {0:.2f} with confidence interval {1}".format(steady_state(simulation_result, expected_number_order_in_a_week)[0], steady_state(simulation_result, expected_number_order_in_a_week)[1]))
print("The expected number of units in a week in steady state is {0:.2f} with confidence interval {1}".format(steady_state(simulation_result, expected_number_unit_in_a_week)[0], steady_state(simulation_result, expected_number_unit_in_a_week)[1]))
print("The probability of more than 75 units are ordered in a week is {0:.2f} with confidence interval {1}".format(steady_state(simulation_result, probability_more_than_75_unit)[0], steady_state(simulation_result, probability_more_than_75_unit)[1]))
print("The probability of no store orders in a week is {0:.2f} with confidence interval {1}".format(steady_state(simulation_result, probability_no_store_order)[0], steady_state(simulation_result, probability_no_store_order)[1]))
print("The expected value of cost function in a week is {0:.2f} with confidence interval {1}".format(steady_state(simulation_result, expected_value_cost)[0], steady_state(simulation_result, expected_value_cost)[1]))